const l=function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))c(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&c(r)}).observe(document,{childList:!0,subtree:!0});function o(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerpolicy&&(i.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?i.credentials="include":n.crossorigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function c(n){if(n.ep)return;n.ep=!0;const i=o(n);fetch(n.href,i)}};l();$(()=>{f()});const a=[{name:"vue",tit:"confident",tit:"confident"},{name:"python",tit:"confident"},{name:"node",tit:"confident"},{name:"mongo",tit:"confident"},{name:"linux",tit:"satisfactory"},{name:"pandas",tit:"confident"},{name:"git",tit:"confident"},{name:"css",tit:"satisfactory"},{name:"django",tit:"satisfactory"},{name:"php",tit:"satisfactory"},{name:"html",tit:"confident"},{name:"matlab",tit:"satisfactory"},{name:"keras",tit:"learning"},{name:"tensorflow",tit:"learning"}],m=["dynamic_graph_exploration","nisaba","m3connect","uniklinik"];function f(){const e=window.localStorage.getItem("lang");$.getJSON("./all_texts.json",function(t){$("#main_header").html(t.main_header_text[e]),$("#about_me_header").html(t.about_me_header_text[e]),$("#about_me_corpus").html(t.about_me_corpus_text[e]),$("#collection_header").html(t.collection_header_text[e]),$("#collection_sub_header").html(t.collection_sub_header_text[e]),$("#changeLanguageButton").html(t.lang_verbose[e]),$("#coffee_text").html(t.coffee_text[e]),m.forEach(o=>{$(`#${o}_title`).html(t[`${o}_title`][e]),$(`#${o}_description`).html(t[`${o}_description`][e])}),a.forEach(o=>{$(`#${o.name}_img`).popover("dispose"),$(`#${o.name}_img`).popover({trigger:"focus",placement:"auto",content:t[`${o.name}_popover_content_text`][e],title:t[o.tit][e]})}),$("#click_on_symbols").html(t.click_on_symbols_text[e])})}const u=(e,t)=>{e.forEach(o=>{o.target.id==="trigger_click_tip"?o.intersectionRatio>0&&($("#click_tip").css("display","flex"),$("body").css("overflow-y","hidden"),s.unobserve(o.target)):o.target.children[0].classList.toggle("is-inViewport",o.isIntersecting)})},s=new IntersectionObserver(u),d={},_=document.querySelectorAll("[data-inviewport]");_.forEach(e=>{s.observe(e,d)});
